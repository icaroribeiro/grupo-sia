import streamlit as st


class DataModelingPage:
    def __init__(self) -> None:
        pass

    def show(self) -> None:
        st.title("üíæ Modelagem de Dados")
        st.markdown("### Mem√≥ria e Persist√™ncia do Agente de IA")
        st.write(
            """
            Para manter o contexto e a mem√≥ria das conversas no menu **üí¨ Bate-Papo**, o sistema emprega um mecanismo 
            de **Checkpointing** (ponto de verifica√ß√£o) no banco de dados PostgreSQL, utilizando o componente 
            `AsyncPostgresSaver` (do LangGraph/LangChain).
            
            Isso garante a **persist√™ncia do estado** de cada workflow (thread), permitindo que as intera√ß√µes 
            sejam retomadas em caso de falha ou simplesmente ao retornar √† mesma thread.
            
            O estado de cada conversa√ß√£o √© salvo nas seguintes tabelas de metadados:
            """
        )

        st.markdown(
            """
            * **`checkpoints`**: Armazena os **instant√¢neos de estado (snapshots)** das threads de conversa√ß√£o. 
              Cada registro cont√©m o estado interno completo do agente de IA em um determinado ponto de execu√ß√£o.
            * **`checkpoint_blobs`**: Usada para armazenar dados bin√°rios ou grandes estruturas de dados associadas 
              aos checkpoints, que s√£o separadas da tabela principal para otimizar o desempenho.
            * **`checkpoint_writes`**: Tabela de rastreamento usada para auxiliar na consist√™ncia transacional e 
              garantir a atomicidade durante a escrita de novos checkpoints.
            * **`checkpoint_migrations`**: Tabela de controle de vers√£o que registra quais altera√ß√µes de esquema 
              foram aplicadas √†s tabelas de checkpoint.
            """
        )

        st.markdown("---")

        st.markdown("### Modelagem de Dados das NF-e")
        st.write(
            """
            O sistema utiliza um esquema relacional **desnormalizado** com duas tabelas principais (`invoice` e `invoice_item`) 
            com colunas correspondentes aos dados de arquivos CSV obtidos do Portal da Transpar√™ncia para armazenar os dados das NF-e.
            
            A tabela `invoice_item` est√° ligada √† tabela `invoice` atrav√©s da **`access_key` (Chave de Acesso)**, 
            e n√£o pelo ID prim√°rio UUID. Esta √© uma rela√ß√£o de **um-para-muitos (1:N)**.
            """
        )

        st.markdown("#### 1. Tabela `invoice` (Cabe√ßalho da Fatura)")
        st.markdown(
            "Esta tabela armazena os dados principais e os participantes da Nota Fiscal (NF-e). **Chave Prim√°ria Composta:** (`id`, `access_key`)."
        )

        invoice_schema = {
            "Coluna": [
                "id",
                "access_key",
                "model",
                "series",
                "number",
                "operation_nature",
                "issue_date",
                "latest_event",
                "latest_event_datetime",
                "emitter_cnpj_cpf",
                "emitter_corporate_name",
                "emitter_state_registration",
                "emitter_uf",
                "emitter_municipality",
                "recipient_cnpj",
                "recipient_name",
                "recipient_uf",
                "recipient_ie_indicator",
                "operation_destination",
                "final_consumer",
                "buyer_presence",
                "total_invoice_value",
                "created_at",
                "updated_at",
            ],
            "Tipo de Dado (PostgreSQL)": [
                "UUID (PK)",
                "VARCHAR(44) (PK/Unique)",
                "VARCHAR(51)",
                "INTEGER",
                "INTEGER",
                "VARCHAR(255)",
                "DATETIME",
                "VARCHAR(255)",
                "DATETIME",
                "VARCHAR(14)",
                "VARCHAR(255)",
                "VARCHAR(20)",
                "VARCHAR(2)",
                "VARCHAR(100)",
                "VARCHAR(14)",
                "VARCHAR(255)",
                "VARCHAR(2)",
                "VARCHAR(50)",
                "VARCHAR(50)",
                "VARCHAR(50)",
                "VARCHAR(50)",
                "NUMERIC(15, 2)",
                "DATETIME (TZ)",
                "DATETIME (TZ)",
            ],
            "Descri√ß√£o (Coment√°rio)": [
                "Identificador UUID √∫nico",
                "Chave de acesso √∫nica (CHAVE DE ACESSO)",
                "Tipo de nota fiscal (MODELO)",
                "S√©rie da nota fiscal (S√âRIE)",
                "N√∫mero da nota fiscal (N√öMERO)",
                "Natureza da opera√ß√£o (NATUREZA DA OPERA√á√ÉO)",
                "Data de emiss√£o (DATA EMISS√ÉO)",
                "Evento mais recente (EVENTO MAIS RECENTE)",
                "Data/hora do evento mais recente",
                "CPF/CNPJ do emitente",
                "Raz√£o social do emitente",
                "Inscri√ß√£o Estadual do emitente",
                "UF do emitente",
                "Munic√≠pio do emitente",
                "CNPJ do destinat√°rio",
                "Nome do destinat√°rio",
                "UF do destinat√°rio",
                "Indicador IE do destinat√°rio",
                "Destino da opera√ß√£o",
                "Indicador de consumidor final",
                "Indicador de presen√ßa do comprador",
                "Valor total da nota fiscal",
                "Timestamp de cria√ß√£o do registro",
                "Timestamp da √∫ltima atualiza√ß√£o do registro",
            ],
        }

        st.dataframe(invoice_schema, use_container_width=True)

        st.markdown("#### 2. Tabela `invoice_item` (Itens da Fatura)")
        st.markdown(
            "Esta tabela √© desnormalizada e armazena os detalhes dos produtos e servi√ßos, ligada √† `invoice` pela `access_key`. **Chave Prim√°ria:** (`id`)."
        )
        st.info(
            "A unicidade √© garantida pela combina√ß√£o (`access_key`, `product_number`)."
        )

        invoice_item_data = {
            "Coluna": [
                "id",
                "access_key",
                "model",
                "series",
                "number",
                "operation_nature",
                "issue_date",
                "emitter_cnpj_cpf",
                "emitter_corporate_name",
                "emitter_state_registration",
                "emitter_uf",
                "emitter_municipality",
                "recipient_cnpj",
                "recipient_name",
                "recipient_uf",
                "recipient_ie_indicator",
                "operation_destination",
                "final_consumer",
                "buyer_presence",
                "product_number",
                "product_service_description",
                "ncm_sh_code",
                "ncm_sh_product_type",
                "cfop",
                "quantity",
                "unit",
                "unit_value",
                "total_value",
                "created_at",
                "updated_at",
            ],
            "Tipo de Dado (PostgreSQL)": [
                "UUID (PK)",
                "VARCHAR(44) (FK)",
                "VARCHAR(51)",
                "INTEGER",
                "INTEGER",
                "VARCHAR(255)",
                "DATETIME",
                "VARCHAR(14)",
                "VARCHAR(255)",
                "VARCHAR(20)",
                "VARCHAR(2)",
                "VARCHAR(100)",
                "VARCHAR(14)",
                "VARCHAR(255)",
                "VARCHAR(2)",
                "VARCHAR(50)",
                "VARCHAR(50)",
                "VARCHAR(50)",
                "VARCHAR(50)",
                "VARCHAR(20)",
                "VARCHAR(255)",
                "VARCHAR(8)",
                "VARCHAR(255)",
                "VARCHAR(4)",
                "NUMERIC(15, 4)",
                "VARCHAR(10)",
                "NUMERIC(21, 10)",
                "NUMERIC(15, 2)",
                "DATETIME (TZ)",
                "DATETIME (TZ)",
            ],
            "Descri√ß√£o (Coment√°rio)": [
                "Identificador UUID √∫nico do item",
                "Chave de Acesso da Fatura",
                "Modelo da NF-e",
                "S√©rie da NF-e",
                "N√∫mero da NF-e",
                "Natureza da Opera√ß√£o",
                "Data de Emiss√£o",
                "CPF/CNPJ do Emitente",
                "Raz√£o Social do Emitente",
                "Inscri√ß√£o Estadual do Emitente",
                "UF do Emitente",
                "Munic√≠pio do Emitente",
                "CNPJ do Destinat√°rio",
                "Nome do Destinat√°rio",
                "UF do Destinat√°rio",
                "Indicador IE do Destinat√°rio",
                "Destino da Opera√ß√£o",
                "Consumidor Final",
                "Presen√ßa do Comprador",
                "N√∫mero do Produto",
                "Descri√ß√£o do Produto/Servi√ßo",
                "C√≥digo NCM/SH",
                "Tipo de Produto NCM/SH",
                "C√≥digo CFOP",
                "Quantidade",
                "Unidade de Medida",
                "Valor Unit√°rio",
                "Valor Total do Item",
                "Timestamp de cria√ß√£o do registro",
                "Timestamp da √∫ltima atualiza√ß√£o do registro",
            ],
        }
        st.dataframe(invoice_item_data, use_container_width=True)

        st.markdown("### Detalhes Relacionais e Chaves")
        st.markdown(
            """
            #### Chaves Prim√°rias (`PK` - Primary Key)
            * **`invoice`**: Chave Prim√°ria Composta por **`id`** e **`access_key`**.
            * **`invoice_item`**: Chave Prim√°ria **`id`**.
            
            #### Chave Estrangeira (`FK` - Foreign Key)
            * **`invoice_item.access_key`** referencia **`invoice.access_key`**.
            
            #### Restri√ß√£o de Unicidade
            * **`invoice`**: **`access_key`** √© √∫nica na tabela de faturas.
            * **`invoice_item`**: Existe uma restri√ß√£o de unicidade composta por **(`access_key`, `product_number`)** para garantir que a combina√ß√£o de fatura e item seja √∫nica.
            """
        )
